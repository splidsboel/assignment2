/*
 * This source file was generated by the Gradle 'init' task
 */
package hyperloglog;

import java.util.Arrays;
import java.util.Scanner;

public class HyperLogLog {
    private static final int[] hashIntegers = {
        0x21ae4036, 0x32435171, 0xac3338cf,
        0xea97b40c, 0x0e504b22, 0x9ff9a4ef,
        0x111d014d, 0x934f3787, 0x6cd079bf,
        0x69db5c31, 0xdf3c28ed, 0x40daf2ad,
        0x82a5891c, 0x4659c7b0, 0x73dc0ca8,
        0xdad3aca2, 0x00c74c7e, 0x9a2521e2,
        0xf38eb6aa, 0x64711ab6, 0x5823150a,
        0xd13a3a9a, 0x30a5aa04, 0x0fb9a1da,
        0xef785119, 0xc9f0b067, 0x1e7dde42,
        0xdda4a7b2, 0x1a1c2640, 0x297c0633,
        0x744edb48, 0x19adce93
    };

    public HyperLogLog() {
        
    }


    
    /**
     * For each integer in A (hashIntegers array) we take the bitwise AND with x,
     * count the number of set bits in the result, extract the parity (whether it's even or odd), 
     * and set corresponding bit in the result hash. 
     * @param x
     * @return deterministic hash of x
     */
    public static int h(int x) {
        int hash = 0;
        for (int i = 0; i < hashIntegers.length; i++) {
            int parity = Integer.bitCount(hashIntegers[i] & x) & 1;
            hash |= parity << i;
        }
        return hash;
    }    

    public static int[] hArray(int[] x){
        return Arrays.stream(x)
            .map(HyperLogLog::h)
            .toArray();
    }


    public static int f(int x){
        return ((x*0xbc164501) & 0x7fffffff) >> 21;
    }

    /**
     * Since œÅ(x) is the position of the first 1 in the binary representation of 
     * the binary string x, we can user numberOfLeadingZeros on the input to see where the first 1 is in the bitstring
     * @param x
     * @return
     */
    public static int rho(int x) {
        if (x == 0) throw new IllegalArgumentException("rho(0) is undefined");
        return Integer.numberOfLeadingZeros(x) + 1;
    }

    /**
     * overloaded hll with default m argument
     * @param Y
     * @return
     */
    public double hll(int[] Y){
        return hll(Y, 1024);
    }
    /**
     * implements hyperloglog.
     * Comments are references to line #'s in the pseudocode (Algorithm 1)
     * @param Y
     * @param m
     * @return
     */
    public double hll(int[] Y, int m){
        double alphaM = 0.7213/(1+(1.079/m));
        int[] M = new int[1024];

        //line 4-6
        for (int i = 0; i < m; i++) {
            M[i] = 0;
        }

        //line 7-11
        for (int y : Y) {
            int j = f(y);
            int x = h(y);
            M[j] = Math.max(M[j], rho(x));
        }

        //line 12
        double sum = 0;
        for (int i = 1; i < m; i++) {
            sum+=Math.pow(2, -M[i]);
        }
        double estimate = (alphaM * (m*m)) * Math.pow(sum, -1);

        //line 13
        int V = 0;
        for (int i : M) {
            if (i==0){
                V++;
            }
        }

        //line 14-16
        if ((estimate<=((5/2)*m))& V>0) {
            return m * Math.log((double) m / V); 
        }

        //line 17-19
        if (estimate>((1/30)*Math.pow(2, 32))) {
            estimate = (Math.pow(-2, 32))*Math.log(1-(estimate/(Math.pow(2, 32))));
        }
        return estimate;
    }
    

    public static int[] readData() {
        Scanner s = new Scanner(System.in);
        int[] x = null;
        try {
            int n = s.nextInt();
            x = new int[n];
            for (int i = 0; i < n; ++i) {
                x[i] = s.nextInt();
            }
        }
        finally {
            s.close();
        }
        return x;
    }

    public static void main(String[] args) {
        int[] x = readData();
        int[] y = null;

        if ("hash".equals(args[0])) {
            y = hArray(x);
        }

        if (y == null) {
            System.out.println("null");
        }
        else {
            System.out.println(String.format("%d %d %d",
                y[0], y[1], y[2]));
        }
    }
}
